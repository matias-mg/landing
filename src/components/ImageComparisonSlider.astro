---
import BlurImage from "./BlurImage.astro";

const {
  leftImage,
  rightImage,
  id = "",
  leftImageSrc = "",
  rightImageSrc = "",
  loading = "lazy",
  classStyles = "",
  leftImageAlt = "",
  rightImageAlt = "",
} = Astro.props;
---

<div class="image-comparison">
  <BlurImage
    img={leftImage}
    src={leftImageSrc}
    alt={leftImageAlt}
    loading={loading}
    classStyles={`image image-left ${classStyles}`}
  />
  <BlurImage
    img={rightImage}
    src={rightImageSrc}
    alt={rightImageAlt}
    loading={loading}
    classStyles={`image image-right ${classStyles}`}
  />
  <div class="slider-handle z-20">
    <div class="slider-line bg-blue-300"></div>
    <div class="slider-arrows text-blue-300">
      <svg
        class="slider-arrow left-arrow"
        viewBox="0 0 24 24"
        width="44"
        height="44"
      >
        <path
          d="M15 18l-6-6 6-6"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg>
      <svg
        class="slider-arrow right-arrow"
        viewBox="0 0 24 24"
        width="44"
        height="44"
      >
        <path
          d="M9 18l6-6-6-6"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg>
    </div>
  </div>
</div>

<style>
  .image-comparison {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: min(calc(100vw * 0.5625), 400px);
    max-height: 400px;
    overflow: hidden;
    user-select: none;
  }

  .image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: fill;
    pointer-events: none;
  }

  .image-right {
    clip-path: inset(0 0 0 50%);
  }

  .slider-handle {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%;
    width: 80px;
    transform: translateX(-50%);
    cursor: ew-resize;
    display: flex;
    justify-content: center;
    align-items: center;
    animation: bounce 4s infinite;
  }

  @keyframes bounce {
    0%, 100% {
      transform: translateX(calc(-50% - 10px));
    }
    50% {
      transform: translateX(calc(-50% + 10px));
    }
  }

  .slider-line {
    position: absolute;
    top: 0;
    bottom: 0;
    width: 2px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
  }

  .slider-arrows {
    position: absolute;
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding: 0 0px;
  }

  .slider-arrow {
    width: 44px;
    height: 44px;
    filter: drop-shadow(0 0 2px rgba(0, 0, 0, 0.5));
  }

  /* Prevent text selection */
  .slider-handle,
  .slider-arrow {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  .image-comparison:hover .slider-handle {
    animation: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    var containers = document.querySelectorAll('.image-comparison');
    
    containers.forEach(function(container: HTMLElement) {
      var handle = container.querySelector('.slider-handle') as HTMLElement;
      var rightImage = container.querySelector('.image-right') as HTMLElement;
      var isDragging = false;
      var animationRemoved = false;
      var lastPosition = 50;

      function getPercentage(pixelValue) {
        return (pixelValue / container.offsetWidth) * 100;
      }

      function updateSliderPosition(x) {
        var percentage = getPercentage(x);
        handle.style.left = percentage + '%';
        handle.style.transform = 'translateX(-50%)';
        rightImage.style.clipPath = 'inset(0 0 0 ' + percentage + '%)';
        lastPosition = percentage;
      }

      function handleMouseDown(e) {
        isDragging = true;
        e.preventDefault();
      }

      function handleMouseUp() {
        isDragging = false;
      }

      function handleMouseMove(e) {
        if (!isDragging) return;
        var rect = container.getBoundingClientRect();
        var x = Math.max(0, Math.min(e.clientX - rect.left, rect.width));
        updateSliderPosition(x);
        e.preventDefault();
      }

      function handleTouchStart(e) {
        isDragging = true;
        e.preventDefault();
      }

      function handleTouchMove(e) {
        if (!isDragging) return;
        var touch = e.touches[0];
        var rect = container.getBoundingClientRect();
        var x = Math.max(0, Math.min(touch.clientX - rect.left, rect.width));
        updateSliderPosition(x);
        e.preventDefault();
      }

      function removeAnimation() {
        if (!animationRemoved) {
          handle.style.animation = 'none';
          handle.style.left = lastPosition + '%';
          handle.style.transform = 'translateX(-50%)';
          rightImage.style.clipPath = 'inset(0 0 0 ' + lastPosition + '%)';
          animationRemoved = true;
        }
      }

      function updateClipPath() {
        if (!animationRemoved) {
          var rect = container.getBoundingClientRect();
          var handleRect = handle.getBoundingClientRect();
          var percentage = ((handleRect.left + handleRect.width / 2) - rect.left) / rect.width * 100;
          rightImage.style.clipPath = 'inset(0 0 0 ' + percentage + '%)';
          lastPosition = percentage;
        }
      }

      function animationFrame() {
        if (!animationRemoved) {
          updateClipPath();
        }
        requestAnimationFrame(animationFrame);
      }

      handle.addEventListener('mousedown', handleMouseDown);
      container.addEventListener('mousemove', handleMouseMove);
      container.addEventListener('mouseup', handleMouseUp);
      container.addEventListener('mouseleave', handleMouseUp);
      container.addEventListener('mouseover', removeAnimation);

      handle.addEventListener('touchstart', handleTouchStart);
      container.addEventListener('touchmove', handleTouchMove);
      container.addEventListener('touchend', handleMouseUp);
      container.addEventListener('touchcancel', handleMouseUp);

      animationFrame();
    });
  });
</script>